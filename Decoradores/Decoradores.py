# üìù Exerc√≠cio: Logger de Fun√ß√µes
# Crie um decorador chamado log_decorator que faz o seguinte:

# ‚úÖ Aceita qualquer fun√ß√£o com qualquer n√∫mero de argumentos (*args, **kwargs).
# ‚úÖ Exibe uma mensagem antes de chamar a fun√ß√£o, informando qual fun√ß√£o foi chamada e com quais argumentos.
# ‚úÖ Exibe uma mensagem depois, informando o resultado da fun√ß√£o.
# ‚úÖ Usa functools.wraps para manter os metadados da fun√ß√£o original.

import functools  # Importa a biblioteca functools para usar wraps e preservar metadados da fun√ß√£o decorada.

# Defini√ß√£o do decorador
def log_decorator(func):
    @functools.wraps(func)  # Mant√©m os metadados da fun√ß√£o original (nome, docstring, etc.)
    def wrapper(*args, **kwargs):  # Aceita qualquer n√∫mero de argumentos posicionais e nomeados
        print(f"üìå Chamando: {func.__name__} com args={args} e kwargs={kwargs}")  
        # Exibe o nome da fun√ß√£o e os argumentos passados a ela.

        resultado = func(*args, **kwargs)  # Chama a fun√ß√£o original com os argumentos recebidos
        print(f"‚úÖ Resultado de {func.__name__}: {resultado}")  
        # Exibe o resultado retornado pela fun√ß√£o original

        return resultado  # Retorna o resultado da fun√ß√£o original para n√£o alterar seu comportamento
    return wrapper  # Retorna a fun√ß√£o `wrapper`, que agora tem a l√≥gica do decorador aplicada

# Fun√ß√£o soma que ser√° decorada
@log_decorator  # Aplica o decorador log_decorator √† fun√ß√£o soma
def soma(a, b):
    return a + b  # Retorna a soma de dois n√∫meros

# Fun√ß√£o sauda√ß√£o que ser√° decorada
@log_decorator  # Aplica o decorador log_decorator √† fun√ß√£o saudacao
def saudacao(nome, mensagem="Ol√°"):
    return f"{mensagem}, {nome}!"  # Retorna uma sauda√ß√£o personalizada

# Teste da fun√ß√£o soma
print(soma(3, 5))  
# üìå Chamando: soma com args=(3, 5) e kwargs={}
# ‚úÖ Resultado de soma: 8
# 8

# Teste da fun√ß√£o saudacao com argumento padr√£o
print(saudacao("Alice"))
# üìå Chamando: saudacao com args=('Alice',) e kwargs={}
# ‚úÖ Resultado de saudacao: Ol√°, Alice!
# Ol√°, Alice!

# Teste da fun√ß√£o saudacao com argumento nomeado
print(saudacao("Bob", mensagem="Bom dia"))
# üìå Chamando: saudacao com args=('Bob',) e kwargs={'mensagem': 'Bom dia'}
# ‚úÖ Resultado de saudacao: Bom dia, Bob!
# Bom dia, Bob!

# OBS : Se voc√™ n√£o retornar o resultado dentro do wrapper, a fun√ß√£o decorada n√£o retornar√° nada (None), quebrando seu comportamento 
# esperado.